import forge.*;
import toolKits.*;
import java.awt.Color;
import javax.swing.JFileChooser;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import javax.swing.DefaultListModel;
import java.util.concurrent.ThreadLocalRandom;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.plaf.nimbus.NimbusLookAndFeel;


/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Michael
 */
public class mainWindow extends javax.swing.JFrame {

    /**
     * Creates new form mainWindow
     */
    public mainWindow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        availablePerkPane = new javax.swing.JScrollPane();
        availablePerks = new javax.swing.JList<>();
        btnAdd = new javax.swing.JButton();
        currentPerkPane = new javax.swing.JScrollPane();
        currentPerks = new javax.swing.JList<>();
        txtCP = new javax.swing.JTextField();
        btnRemove = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtPerkDescription = new javax.swing.JTextArea();
        btnRollPerk = new javax.swing.JButton();
        txtSearch = new javax.swing.JTextField();
        cmbRollType = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        btnBuyPerk = new javax.swing.JButton();
        btnSellPerk = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        currentDomainPane = new javax.swing.JScrollPane();
        currentDomains = new javax.swing.JList<>();
        btnAddDomain = new javax.swing.JButton();
        btnRemoveDomain = new javax.swing.JButton();
        availableDomainPane = new javax.swing.JScrollPane();
        availableDomains = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        mnuOpen = new javax.swing.JMenuItem();
        mnuLoad = new javax.swing.JMenuItem();
        mnuSave = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        availablePerks.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        availablePerks.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                availablePerksMouseClicked(evt);
            }
        });
        availablePerks.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                availablePerksValueChanged(evt);
            }
        });
        availablePerkPane.setViewportView(availablePerks);

        btnAdd.setText("<<<");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        currentPerks.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        currentPerks.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                currentPerksMouseClicked(evt);
            }
        });
        currentPerks.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                currentPerksValueChanged(evt);
            }
        });
        currentPerkPane.setViewportView(currentPerks);

        txtCP.setText("0000");
        txtCP.setText("0");
        txtCP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCPActionPerformed(evt);
            }
        });

        btnRemove.setText(">>>");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        jLabel1.setText("CP");

        txtPerkDescription.setColumns(20);
        txtPerkDescription.setLineWrap(true);
        txtPerkDescription.setRows(5);
        txtPerkDescription.setTabSize(4);
        txtPerkDescription.setWrapStyleWord(true);
        jScrollPane3.setViewportView(txtPerkDescription);

        btnRollPerk.setText("Roll");
        btnRollPerk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRollPerkActionPerformed(evt);
            }
        });

        txtSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchActionPerformed(evt);
            }
        });

        cmbRollType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Standard", "Budget Roll", "Lowest of 10" }));

        jLabel4.setText("Search Perks");

        jLabel5.setText("roll type");

        jButton1.setText("+");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnBuyPerk.setText("Buy Perk");
        btnBuyPerk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuyPerkActionPerformed(evt);
            }
        });

        btnSellPerk.setText("Sell Perk");
        btnSellPerk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSellPerkActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(currentPerkPane, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnSellPerk, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnBuyPerk, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE)
                            .addComponent(btnRemove, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 6, Short.MAX_VALUE)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbRollType, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnRollPerk)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCP, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(availablePerkPane))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtCP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRollPerk)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbRollType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jButton1))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(currentPerkPane)
                            .addComponent(availablePerkPane))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(btnAdd)
                        .addGap(6, 6, 6)
                        .addComponent(btnRemove)
                        .addGap(31, 31, 31)
                        .addComponent(btnBuyPerk)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSellPerk)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)))
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Perks", jPanel1);

        currentDomains.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        currentDomains.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                currentDomainsValueChanged(evt);
            }
        });
        currentDomainPane.setViewportView(currentDomains);

        btnAddDomain.setText("<<<");
        btnAddDomain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddDomainActionPerformed(evt);
            }
        });

        btnRemoveDomain.setText(">>>");
        btnRemoveDomain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveDomainActionPerformed(evt);
            }
        });

        availableDomains.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        availableDomains.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                availableDomainsValueChanged(evt);
            }
        });
        availableDomainPane.setViewportView(availableDomains);

        jLabel2.setText("Available Domains");

        jLabel3.setText("Current Domains");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(currentDomainPane, javax.swing.GroupLayout.DEFAULT_SIZE, 411, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAddDomain)
                            .addComponent(btnRemoveDomain))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(availableDomainPane, javax.swing.GroupLayout.DEFAULT_SIZE, 411, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(availableDomainPane)
                        .addComponent(currentDomainPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(btnAddDomain)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRemoveDomain)
                        .addGap(55, 55, 55)))
                .addContainerGap(360, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Domains", jPanel2);

        jMenu1.setText("File");

        mnuOpen.setText("Open");
        mnuOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuOpenActionPerformed(evt);
            }
        });
        jMenu1.add(mnuOpen);

        mnuLoad.setText("Load");
        mnuLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuLoadActionPerformed(evt);
            }
        });
        jMenu1.add(mnuLoad);

        mnuSave.setText("Save");
        mnuSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSaveActionPerformed(evt);
            }
        });
        jMenu1.add(mnuSave);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void setModels(){
        availablePerksModel.clear();
        currentPerksModel.clear();
        availableDomainsModel.clear();
        currentDomainsModel.clear();
        for(Domain dom : forge.getDomains()){
            if(dom.isActive()){
                currentDomainsModel.addElement(dom.getName().trim());
                for(Perk perk : dom.getPerks()){
                    if(perk.isActive()){
                        currentPerksModel.addElement(perk.getName().trim());
                    }else{
                        availablePerksModel.addElement(perk.getName().trim());
                    }
                }
            }else{
                availableDomainsModel.addElement(dom.getName().trim());
            }
        }
        this.availablePerks.setModel(availablePerksModel);
        this.currentPerks.setModel(currentPerksModel);
        this.availableDomains.setModel(availableDomainsModel);
        this.currentDomains.setModel(currentDomainsModel);
        this.txtCP.setText(this.forge.getPoints() + "");
    }
    
    private void searchForPerkInModels(String searchText){
        availablePerksModel.clear();
        currentPerksModel.clear();
        availableDomainsModel.clear();
        currentDomainsModel.clear();
        for(Domain dom : forge.getDomains()){
            if(dom.isActive()){
                currentDomainsModel.addElement(dom.getName().trim());
                for(Perk perk : dom.getPerks()){
                    if(perk.isActive() && perk.getName().toLowerCase().contains(searchText)){
                        currentPerksModel.addElement(perk.getName().trim());
                    }else if (perk.getName().toLowerCase().contains(searchText)){
                        availablePerksModel.addElement(perk.getName().trim());
                    }
                }
            }else{
                availableDomainsModel.addElement(dom.getName().trim());
            }
        }
        this.availablePerks.setModel(availablePerksModel);
        this.currentPerks.setModel(currentPerksModel);
        this.availableDomains.setModel(availableDomainsModel);
        this.currentDomains.setModel(currentDomainsModel);
    }
    
    private void rollSearch(String searchText){
        availablePerksModel.clear();
        for(Domain dom : forge.getDomains()){
            if(dom.isActive()){
                for(Perk perk : dom.getPerks()){
                    
                    if(perk.isActive() && perk.getName().toLowerCase().contains(searchText)){
                        //currentPerksModel.addElement(perk.getName().trim());
                    }else if (perk.getName().toLowerCase().contains(searchText)){
                        availablePerksModel.addElement(perk.getName().trim());
                        this.txtPerkDescription.setText(perk.toDescription());
                    }
                }
            }
        }
        this.availablePerks.setModel(availablePerksModel);
    }
    
    
    
    private void currentDomainsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_currentDomainsValueChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_currentDomainsValueChanged

    private void btnAddDomainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddDomainActionPerformed
        for(Domain dom : forge.getDomains()){
            if(dom.getName().equals(this.availableDomains.getSelectedValue())){
                dom.setActive(true);
            }
        }
        this.setModels();
    }//GEN-LAST:event_btnAddDomainActionPerformed

    private void btnRemoveDomainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveDomainActionPerformed
        for(Domain dom : forge.getDomains()){
            if(dom.getName().equals(this.currentDomains.getSelectedValue())){
                dom.setActive(false);
            }
        }
        this.setModels();
    }//GEN-LAST:event_btnRemoveDomainActionPerformed

    private void availableDomainsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_availableDomainsValueChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_availableDomainsValueChanged

    private void mnuLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuLoadActionPerformed
        JFileChooser save = new JFileChooser();
        save.setDialogTitle("Open File");
        
        if(save.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
            try{
                this.forge = WriterReader.read(save.getSelectedFile());
                if(this.forge.getDomains().size() < 1){
                    this.forge = WriterReader.read(save.getSelectedFile());
                }
            }catch(Exception e){
            }
        }
        this.setModels();
    }//GEN-LAST:event_mnuLoadActionPerformed

    private void mnuSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSaveActionPerformed
        JFileChooser save = new JFileChooser();
        save.setDialogTitle("Save File");
        
        
        if(save.showSaveDialog(this) == JFileChooser.APPROVE_OPTION){
            try{
                WriterReader.write(this.forge, save.getSelectedFile());
            }catch(Exception e){
            }
        }
    }//GEN-LAST:event_mnuSaveActionPerformed

    private void mnuOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuOpenActionPerformed
        StringBuilder data = new StringBuilder();
        Domain domain = null;
        ArrayList<Perk> perks = new ArrayList<>();
        ArrayList<String> strPerkBlobs = new ArrayList<>();
        JFileChooser chooser = new JFileChooser();
        availablePerksModel = new DefaultListModel();
        currentPerksModel = new DefaultListModel();
        
        chooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        int result = chooser.showOpenDialog(this);
        
        if(result == JFileChooser.APPROVE_OPTION){
            File file = chooser.getSelectedFile();
            try{
                Scanner myReader = new Scanner(file, "UTF-8");
                while(myReader.hasNextLine()){
                    data.append(myReader.nextLine().trim() + System.lineSeparator());
                    data.append(System.lineSeparator());
                }
                
                int domainCount = 0;
                for(String line : data.toString().split("---")){
                    if(line.length() > 1){
                        //if domain line, create a new domain
                        if((line.contains("Perks)") && line.contains("Domain"))){
                            domain = new Domain(line, new ArrayList<Perk>());
                        }else{
                        //if not a domain line, it must be a perk line
                            //use class method to add all perks from perk blob
                            domain.parsePerks(line);
                            
                            //add all the perks from the domain to the celestial forge
                            forge.addDomain(new Domain(domain.getName().toString(), domain.getPerks()));
                            
                            //reset for next domain
                            domain = null;
                            perks.clear();
                            
                        }
                    }
                }
            }catch(FileNotFoundException e){}
            this.setModels();
            
        }
        
    }//GEN-LAST:event_mnuOpenActionPerformed

    private void btnRollPerkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRollPerkActionPerformed
        String rollType = this.cmbRollType.getSelectedItem().toString();
        int randomNum = ThreadLocalRandom.current().nextInt(0, this.availablePerksModel.getSize());
        String rolledPerk = this.availablePerksModel.getElementAt(randomNum).toString();
        //"Standard", "Reroll", "Spamroll", "Lowest of 10"
        System.out.println(rollType);
        this.setModels();
        
        switch (rollType){
                case "Standard":
                    this.forge.setPoints(this.forge.getPoints() + 100);
                    randomNum = ThreadLocalRandom.current().nextInt(0, this.availablePerksModel.getSize());
                    this.rollSearch(forge.getPerk(this.availablePerksModel.getElementAt(randomNum).toString()).getName().trim().toLowerCase());
                    break;
                case "Budget Roll":
                    randomNum = ThreadLocalRandom.current().nextInt(0, this.availablePerksModel.getSize());
                    while(forge.getPerk(this.availablePerksModel.getElementAt(randomNum).toString()).getCost() > forge.getPoints()){
                        randomNum = ThreadLocalRandom.current().nextInt(0, this.availablePerksModel.getSize());
                    }
                    this.rollSearch(forge.getPerk(this.availablePerksModel.getElementAt(randomNum).toString()).getName().trim().toLowerCase());
                    break;
                case "Lowest of 10":
                    String currentPerk = "";
                    int perkTotal = 0;
                    int failAt = 0;
                    while(perkTotal < 10){
                        this.setModels();
                        randomNum = ThreadLocalRandom.current().nextInt(0, this.availablePerksModel.getSize());
                        
                        while(forge.getPerk(this.availablePerksModel.getElementAt(randomNum).toString()).getCost() > forge.getPoints() && failAt < 100){
                            randomNum = ThreadLocalRandom.current().nextInt(0, this.availablePerksModel.getSize());
                        }
                        failAt = 0;
                        
                        if(currentPerk.equals("") || (this.forge.getPerk(currentPerk).getCost() > forge.getPerk(this.availablePerksModel.getElementAt(randomNum).toString()).getCost())){
                            currentPerk = this.availablePerksModel.getElementAt(randomNum).toString();
                            System.out.println("perks have been swapped");
                        }
                        
                        perkTotal = perkTotal + 1;
                    }
                    this.rollSearch(currentPerk.trim().toLowerCase());
                    
                    break;      
        }
        
        //if(this.availableModel.get(randomNum))
        //\([0-9]{1,4}CP\)
    }//GEN-LAST:event_btnRollPerkActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        Perk perkMoved = new Perk("", "", 0, "");
        for(Domain dom : forge.getDomains()){
            for(Perk perk : dom.getPerks()){
                if(perk.getName().equals(this.currentPerks.getSelectedValue())){
                    perk.setActive(false);
                    perkMoved = perk;
                }
            }
        }
        this.setModels();
        this.availablePerks.setSelectedValue(perkMoved.getName().toString().trim(), true);
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void currentPerksValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_currentPerksValueChanged
        
    }//GEN-LAST:event_currentPerksValueChanged

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        Perk perkMoved = new Perk("", "", 0, "");
        for(Domain dom : forge.getDomains()){
            for(Perk perk : dom.getPerks()){
                if(perk.getName().equals(this.availablePerks.getSelectedValue())){
                    perk.setActive(true);
                    perkMoved = perk;
                }
            }
        }
        this.setModels();
        this.currentPerks.setSelectedValue(perkMoved.getName().toString().trim(), true);
    }//GEN-LAST:event_btnAddActionPerformed

    private void availablePerksValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_availablePerksValueChanged
        
    }//GEN-LAST:event_availablePerksValueChanged

    private void txtSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchActionPerformed
        //if enter is pressed do the code below
        searchForPerkInModels(this.txtSearch.getText().toLowerCase());
    }//GEN-LAST:event_txtSearchActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.forge.setPoints(this.forge.getPoints() + 100);
        this.txtCP.setText(this.forge.getPoints() + "");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnBuyPerkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuyPerkActionPerformed
        Perk perkMoved = new Perk("", "", 0, "");
        for(Domain dom : forge.getDomains()){
            for(Perk perk : dom.getPerks()){
                if(perk.getName().equals(this.availablePerks.getSelectedValue())){
                    perk.setActive(true);
                    if(perk.getCost() <= this.forge.getPoints()){
                        this.forge.setPoints(this.forge.getPoints() - perk.getCost());
                        perkMoved = perk;
                    }
                }
            }
        }
        this.setModels();
        this.currentPerks.setSelectedValue(perkMoved.getName().toString().trim(), true);
    }//GEN-LAST:event_btnBuyPerkActionPerformed

    private void btnSellPerkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSellPerkActionPerformed
        Perk perkMoved = new Perk("", "", 0, "");
        for(Domain dom : forge.getDomains()){
            for(Perk perk : dom.getPerks()){
                if(perk.getName().equals(this.currentPerks.getSelectedValue())){
                    perk.setActive(false);
                    this.forge.setPoints(perk.getCost() + this.forge.getPoints());
                    perkMoved = perk;
                }
            }
        }
        this.setModels();
        this.availablePerks.setSelectedValue(perkMoved.getName().toString().trim(), true);
    }//GEN-LAST:event_btnSellPerkActionPerformed

    private void txtCPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCPActionPerformed
        this.forge.setPoints(Integer.parseInt(this.txtCP.getText()));
    }//GEN-LAST:event_txtCPActionPerformed

    private void currentPerksMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_currentPerksMouseClicked
        this.txtPerkDescription.setText(forge.getPerk(this.currentPerks.getSelectedValue()).toDescription());
    }//GEN-LAST:event_currentPerksMouseClicked

    private void availablePerksMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_availablePerksMouseClicked
        this.txtPerkDescription.setText(forge.getPerk(this.availablePerks.getSelectedValue()).toDescription());
    }//GEN-LAST:event_availablePerksMouseClicked
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
       
        

        for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
                        try {
                            UIManager.setLookAndFeel(new NimbusLookAndFeel());
                            UIManager.put("control", new Color(128, 128, 128));
                            UIManager.put("info", new Color(128, 128, 128));
                            UIManager.put("nimbusBase", new Color(18, 30, 49));
                            UIManager.put("nimbusAlertYellow", new Color(248, 187, 0));
                            UIManager.put("nimbusDisabledText", new Color(128, 128, 128));
                            UIManager.put("nimbusFocus", new Color(115, 164, 209));
                            UIManager.put("nimbusGreen", new Color(176, 179, 50));
                            UIManager.put("nimbusInfoBlue", new Color(66, 139, 221));
                            UIManager.put("nimbusLightBackground", new Color(18, 30, 49));
                            UIManager.put("nimbusOrange", new Color(191, 98, 4));
                            UIManager.put("nimbusRed", new Color(169, 46, 34));
                            UIManager.put("nimbusSelectedText", new Color(255, 255, 255));
                            UIManager.put("nimbusSelectionBackground", new Color(104, 93, 156));
                            UIManager.put("text", new Color(230, 230, 230));
                        } catch (UnsupportedLookAndFeelException exc) {
                            System.err.println("Nimbus: Unsupported Look and feel!");
                        }
                break;
            }
        }
        //</editor-fold>
        

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mainWindow().setVisible(true);
            }
        });
    }

    
    Map<String,String> perkList = new HashMap<>();
    DefaultListModel availablePerksModel = new DefaultListModel();
    DefaultListModel currentPerksModel = new DefaultListModel();
    DefaultListModel availableDomainsModel = new DefaultListModel();
    DefaultListModel currentDomainsModel = new DefaultListModel();
    Forge forge = new Forge();
    Perk lastRoll = new Perk("","",0, "");
    ArrayList<Perk> tenPerks = new ArrayList<Perk>();
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane availableDomainPane;
    private javax.swing.JList<String> availableDomains;
    private javax.swing.JScrollPane availablePerkPane;
    private javax.swing.JList<String> availablePerks;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnAddDomain;
    private javax.swing.JButton btnBuyPerk;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnRemoveDomain;
    private javax.swing.JButton btnRollPerk;
    private javax.swing.JButton btnSellPerk;
    private javax.swing.JComboBox<String> cmbRollType;
    private javax.swing.JScrollPane currentDomainPane;
    private javax.swing.JList<String> currentDomains;
    private javax.swing.JScrollPane currentPerkPane;
    private javax.swing.JList<String> currentPerks;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JMenuItem mnuLoad;
    private javax.swing.JMenuItem mnuOpen;
    private javax.swing.JMenuItem mnuSave;
    private javax.swing.JTextField txtCP;
    private javax.swing.JTextArea txtPerkDescription;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
