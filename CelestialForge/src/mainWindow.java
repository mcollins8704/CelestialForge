import javax.swing.JFileChooser;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import java.util.concurrent.ThreadLocalRandom;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Michael
 */
public class mainWindow extends javax.swing.JFrame {

    /**
     * Creates new form mainWindow
     */
    public mainWindow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnOpen = new javax.swing.JButton();
        btnImport = new javax.swing.JButton();
        btnExport = new javax.swing.JButton();
        currentPerkPane = new javax.swing.JScrollPane();
        currentPerks = new javax.swing.JList<>();
        btnAdd = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        availablePerkPane = new javax.swing.JScrollPane();
        availablePerks = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtPerkDescription = new javax.swing.JTextArea();
        txtCP = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btnRollPerk = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnOpen.setText("Open");
        btnOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenActionPerformed(evt);
            }
        });

        btnImport.setText("Import");
        btnImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportActionPerformed(evt);
            }
        });

        btnExport.setText("Export");
        btnExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportActionPerformed(evt);
            }
        });

        currentPerks.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        currentPerks.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                currentPerksValueChanged(evt);
            }
        });
        currentPerkPane.setViewportView(currentPerks);

        btnAdd.setText("<<<");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnRemove.setText(">>>");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        availablePerks.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        availablePerks.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                availablePerksValueChanged(evt);
            }
        });
        availablePerkPane.setViewportView(availablePerks);

        txtPerkDescription.setColumns(20);
        txtPerkDescription.setLineWrap(true);
        txtPerkDescription.setRows(5);
        txtPerkDescription.setTabSize(4);
        txtPerkDescription.setWrapStyleWord(true);
        jScrollPane3.setViewportView(txtPerkDescription);

        txtCP.setText("0000");
        txtCP.setText("0");

        jLabel1.setText("CP");

        btnRollPerk.setText("Roll");
        btnRollPerk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRollPerkActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(currentPerkPane)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnOpen)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnImport)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnExport)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnAdd)
                                    .addComponent(btnRemove))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(availablePerkPane))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 158, Short.MAX_VALUE)
                                .addComponent(btnRollPerk)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCP, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOpen)
                    .addComponent(btnImport)
                    .addComponent(btnExport)
                    .addComponent(txtCP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(btnRollPerk))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(availablePerkPane)
                            .addComponent(currentPerkPane))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRemove)
                        .addGap(61, 61, 61)))
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenActionPerformed
        File file;
        StringBuilder data = new StringBuilder();
        ArrayList<String> perks = new ArrayList<>();
        JFileChooser chooser = new JFileChooser();
        availableModel = new DefaultListModel();
        currentModel = new DefaultListModel();
        
        chooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        int result = chooser.showOpenDialog(this);
        
        if(result == JFileChooser.APPROVE_OPTION){
            file = chooser.getSelectedFile();
            try{
                Scanner myReader = new Scanner(file);
                while(myReader.hasNextLine()){
                    data.append(myReader.nextLine().trim() + System.lineSeparator());
                    data.append(System.lineSeparator());
                }
                System.out.println("past readlines");
                for(String domain : data.toString().split("---")){
                    if(domain.length() > 1 && (!domain.contains("Perks)") || !domain.contains("Domain"))){
                        for(String perk : domain.split(System.lineSeparator()+ "-")){
                            perks.add(perk);
                        }
                    }
                }
            }catch(FileNotFoundException e){}
            
            availableModel.clear();
            currentModel.clear();
            for(String perk : perks){
                if(perk.contains("CP)")){
                    String[] pieces = perk.split("CP\\)");
                    String perkName = "first";
                    String perkDescription = "";
                    int iteration = 0;
                    for(String x : pieces){
                        iteration = iteration+1;
                        if(!perkName.equals("first")){
                            perkDescription = perkDescription + System.lineSeparator() + x;
                            if(pieces.length > iteration){
                                perkDescription = perkDescription + "CP)";
                            }
                        }else{
                            perkName = x + "CP)";
                        }
                    }
                    perkList.put(perkName.trim(), perkDescription.trim());
                    availableModel.addElement(perkName.trim());
                }
            }
            this.availablePerks.setModel(availableModel);
            this.currentPerks.setModel(currentModel);
            
        }
        
    }//GEN-LAST:event_btnOpenActionPerformed

    private void btnRollPerkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRollPerkActionPerformed
        int cpTotal = Integer.parseInt(this.txtCP.getText());
        int perkCost;
        cpTotal = cpTotal + 100;
        this.txtCP.setText("" + cpTotal);
        
        int randomNum = ThreadLocalRandom.current().nextInt(0, this.availableModel.getSize());
        Pattern pattern = Pattern.compile("\\([0-9]{1,4}CP\\)");
        Matcher matcher = pattern.matcher(this.availableModel.getElementAt(randomNum).toString());
        if (matcher.find()){
            perkCost = Integer.parseInt(matcher.group(0).substring(1, matcher.group(0).length()-3));
            if(perkCost <= cpTotal){
                cpTotal = cpTotal - perkCost;
                this.txtCP.setText(cpTotal + "");
                this.currentModel.addElement(this.availableModel.getElementAt(randomNum));
                this.availableModel.removeElement(this.availableModel.getElementAt(randomNum));
            }
        }
        //if(this.availableModel.get(randomNum))
        //\([0-9]{1,4}CP\)
    }//GEN-LAST:event_btnRollPerkActionPerformed

    private void currentPerksValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_currentPerksValueChanged
        this.txtPerkDescription.setText(perkList.get(this.currentPerks.getSelectedValue()));
    }//GEN-LAST:event_currentPerksValueChanged

    private void availablePerksValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_availablePerksValueChanged
        this.txtPerkDescription.setText(perkList.get(this.availablePerks.getSelectedValue()));
    }//GEN-LAST:event_availablePerksValueChanged

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        if(this.availablePerks.getSelectedValue().length() > 0){this.currentModel.addElement(this.availablePerks.getSelectedValue());}
        this.availableModel.removeElement(this.availablePerks.getSelectedValue());
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        if(this.currentPerks.getSelectedValue().length() > 0){this.availableModel.addElement(this.currentPerks.getSelectedValue());}
        this.currentModel.removeElement(this.currentPerks.getSelectedValue());
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportActionPerformed
        JFileChooser save = new JFileChooser();
        save.setDialogTitle("Save File");
        
        int result = save.showSaveDialog(this);
        if(result == JFileChooser.APPROVE_OPTION){
            FileWriter csvWrite = null;
            try {
                File saveFile = save.getSelectedFile();
                csvWrite = new FileWriter(save.getSelectedFile() + "");
                if(this.currentModel.size() > 0){
                    for(Object str : this.currentModel.toArray()){
                        if(!str.equals(null)){
                            String key = str.toString();
                            csvWrite.write("current" + "||" + key + "||" + this.perkList.get(key).replace(System.lineSeparator(), "newLinePlacement") + System.lineSeparator());
                        }
                    }
                }
                if(this.availableModel.size() > 0){
                    for(Object str : this.availableModel.toArray()){
                        if(str != null){
                            String key = str.toString();
                            csvWrite.write("available" + "||" + key + "||" + this.perkList.get(key).replace(System.lineSeparator(), "newLinePlacement") + System.lineSeparator());
                        }
                    }
                }
            } catch (IOException ex) {
                Logger.getLogger(mainWindow.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    csvWrite.close();
                } catch (IOException ex) {
                    Logger.getLogger(mainWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        
    }//GEN-LAST:event_btnExportActionPerformed

    private void btnImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportActionPerformed
        File file;
        ArrayList<String> perks = new ArrayList<>();
        JFileChooser chooser = new JFileChooser();
        availableModel = new DefaultListModel();
        currentModel = new DefaultListModel();
        
        chooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        int result = chooser.showOpenDialog(this);
        
        if(result == JFileChooser.APPROVE_OPTION){
            file = chooser.getSelectedFile();
            try{
                Scanner myReader = new Scanner(file);
                while(myReader.hasNextLine()){
                    perks.add(myReader.nextLine());
                }
                
                for(String perk : perks){
                    String type = perk.split("\\|\\|")[0];
                    String name = perk.split("\\|\\|")[1];
                    String description = perk.split("\\|\\|")[2].replaceAll("newLinePlacement", System.lineSeparator());
                    perkList.put(name, description);
                    
                    if(type.equals("current")){
                        this.currentModel.addElement(name);
                    }
                    
                    if(type.equals("available")){
                        this.availableModel.addElement(name);
                    }
                }
                
            }catch(FileNotFoundException e){}
            
            this.availablePerks.setModel(availableModel);
            this.currentPerks.setModel(currentModel);
        }
    }//GEN-LAST:event_btnImportActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mainWindow().setVisible(true);
            }
        });
    }

    
    Map<String,String> perkList = new HashMap<>();
    DefaultListModel availableModel;
    DefaultListModel currentModel;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane availablePerkPane;
    private javax.swing.JList<String> availablePerks;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnExport;
    private javax.swing.JButton btnImport;
    private javax.swing.JButton btnOpen;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnRollPerk;
    private javax.swing.JScrollPane currentPerkPane;
    private javax.swing.JList<String> currentPerks;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField txtCP;
    private javax.swing.JTextArea txtPerkDescription;
    // End of variables declaration//GEN-END:variables
}
